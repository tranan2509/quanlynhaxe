CREATE DATABASE WORKSHOP
GO 


USE WORKSHOP
GO



BEGIN --create table
CREATE TABLE Photo
(
	id INT IDENTITY PRIMARY KEY,
	image IMAGE
)

CREATE TABLE Car
(
	id INT IDENTITY PRIMARY KEY,
	licensePlates NVARCHAR(30), 
	type NVARCHAR(30), 
	color NVARCHAR(30),
)

CREATE TABLE ImageCar
(
	id INT IDENTITY PRIMARY KEY,
	idCar INT FOREIGN KEY REFERENCES dbo.Car(id),
	frontCheckIn IMAGE,
	backCheckIn IMAGE,
	frontCheckOut IMAGE,
	backCheckOut IMAGE,
	status INT NOT NULL DEFAULT 0 -- 0: chưa ra, 1: đã ra
)

CREATE TABLE ImageCarRent
(
	id INT IDENTITY PRIMARY KEY,
	idCar INT FOREIGN KEY REFERENCES dbo.Car(id),
	frontCheckIn IMAGE,
	backCheckIn IMAGE
)

CREATE TABLE StatusCar
(
	id INT IDENTITY PRIMARY KEY,
	idCar INT FOREIGN KEY REFERENCES dbo.Car(id),
	idOwner INT, 
	idRenter INT, 
	isOwner INT -- 1 true, 0 false
)

CREATE TABLE TypeCustomer
(
	id INT PRIMARY KEY,  -- 0: chưa đăng kí thành viên -- 1: Khách hành thường (đã đăng kí) -- 2: Khách hàng vip
	name NVARCHAR(30),
	discount FLOAT DEFAULT 0
)

CREATE TABLE Customer
(
	id INT IDENTITY PRIMARY KEY,
	fname NVARCHAR(30),
	lname NVARCHAR(30),
	identityNumber NVARCHAR(30),
	gender NVARCHAR(30),
	bdate DATE,
	address NVARCHAR(100),
	phone NVARCHAR(30),
	idPhoto INT FOREIGN KEY REFERENCES dbo.Photo(id),
	typeCustomer INT FOREIGN KEY REFERENCES dbo.TypeCustomer(id),
	totalMoney FLOAT,
	qrCode NVARCHAR(30)
)

CREATE TABLE Speciality
(
	id INT IDENTITY PRIMARY KEY,
	content NVARCHAR(30)
)

CREATE TABLE Staff
(
	id INT IDENTITY PRIMARY KEY,
	fname NVARCHAR(30),
	lname NVARCHAR(30),
	identityNumber NVARCHAR(30) UNIQUE,
	gender NVARCHAR(30),
	bdate DATE,
	address NVARCHAR(100),
	phone NVARCHAR(30),
	idPhoto INT FOREIGN KEY REFERENCES dbo.Photo(id),
	salary FLOAT,
	bonus FLOAT,
	idSpeciality INT FOREIGN KEY REFERENCES dbo.Speciality(id),
	pass NVARCHAR(30)
)


CREATE TABLE Work
(
	id INT IDENTITY PRIMARY KEY,
	content NVARCHAR(30)
)

CREATE TABLE Contract
(
	id INT IDENTITY PRIMARY KEY,
	timeIn DATETIME,
	timeOut DATETIME,
	price FLOAT, 
	idCustomer INT FOREIGN KEY REFERENCES dbo.Customer(id),
	idStaff INT FOREIGN KEY REFERENCES dbo.Staff(id),
	idCar INT FOREIGN KEY REFERENCES dbo.Car(id),
	typeParking NVARCHAR(30),
	valueParking INT
)

CREATE TABLE ContractDetail
(
	id INT IDENTITY PRIMARY KEY,
	idContract INT FOREIGN KEY REFERENCES dbo.Contract(id),
	idWork INT FOREIGN KEY REFERENCES dbo.Work(id),
	detail NVARCHAR(200)
)

CREATE TABLE Receipt
(
	id INT IDENTITY PRIMARY KEY,
	idContract INT FOREIGN KEY REFERENCES dbo.Contract(id),
	dsign DATE,
	fname NVARCHAR(30), 
	lname NVARCHAR(30), 
	price FLOAT,
	idStaff INT FOREIGN KEY REFERENCES dbo.Staff(id)
)

CREATE TABLE PriceTypeCarParking
(
	id INT IDENTITY PRIMARY KEY,
	typeCar NVARCHAR(30),
	price FLOAT DEFAULT 0
)


CREATE TABLE ContractRent
(
	id INT IDENTITY PRIMARY KEY,
	idStaff INT FOREIGN KEY REFERENCES dbo.Staff(id),
	idCustomer INT FOREIGN KEY REFERENCES dbo.Customer(id),
	idCar INT FOREIGN KEY REFERENCES dbo.Car(id),
	timeIn DATETIME,
	timeOut DATETIME,
	cost INT
)

CREATE TABLE Company
(
	id INT PRIMARY KEY,
	fname NVARCHAR(30),
	lname NVARCHAR(30),
	founding DATETIME,
	address NVARCHAR(50),
	phone NVARCHAR(50)
)

END
GO
--======================================================================================--
-- Insert Data
INSERT INTO dbo.Company (id, fname, lname, founding, address, phone) VALUES (0, N'Shop', N'Work', N'20000101', N'HCM', N'0392889894')
GO

INSERT dbo.TypeCustomer VALUES  ( 0, N'Basic', 0.0 )
INSERT dbo.TypeCustomer VALUES  ( 1, N'Member', 0.05)
INSERT dbo.TypeCustomer VALUES  ( 2, N'VIP', 0.12)
GO
	
INSERT dbo.PriceTypeCarParking (typeCar, price) VALUES (N'Car', 700)
INSERT dbo.PriceTypeCarParking (typeCar, price) VALUES (N'Motobike', 500)
INSERT dbo.PriceTypeCarParking (typeCar, price) VALUES (N'Bicycle', 300)
GO

INSERT INTO Photo(image) VALUES ( 
INSERT INTO Photo(image) VALUES ( 
GO

INSERT INTO Speciality(content) VALUES (N'Manager')
INSERT INTO Speciality(content) VALUES (N'Staff')
GO

INSERT INTO Staff(fname, lname, identityNumber, gender, bdate, address, phone, idPhoto, salary, bonus, idSpeciality, pass) VALUES (N'An', N'Tran', N'215523795', N'Male', '20000925', N'Binh Dinh', N'0392889894', 1, 10000000, 500000, 1, N'1')
INSERT INTO Staff(fname, lname, identityNumber, gender, bdate, address, phone, idPhoto, salary, bonus, idSpeciality, pass) VALUES (N'Bao', N'Le Nguyen Gia', N'43543264343', N'Male', '20000703', N'Dong Nai', N'0385784391', 2, 15000000, 700000, 2, N'1')
GO

--======================================================================================--
CREATE FUNCTION [dbo].[non_unicode_convert](@inputVar NVARCHAR(MAX) )
RETURNS NVARCHAR(MAX)
AS
BEGIN    
    IF (@inputVar IS NULL OR @inputVar = '')  RETURN ''
   
    DECLARE @RT NVARCHAR(MAX)
    DECLARE @SIGN_CHARS NCHAR(256)
    DECLARE @UNSIGN_CHARS NCHAR (256)
 
    SET @SIGN_CHARS = N'ăâđêôơưàảãạáằẳẵặắầẩẫậấèẻẽẹéềểễệếìỉĩịíòỏõọóồổỗộốờởỡợớùủũụúừửữựứỳỷỹỵýĂÂĐÊÔƠƯÀẢÃẠÁẰẲẴẶẮẦẨẪẬẤÈẺẼẸÉỀỂỄỆẾÌỈĨỊÍÒỎÕỌÓỒỔỖỘỐỜỞỠỢỚÙỦŨỤÚỪỬỮỰỨỲỶỸỴÝ' + NCHAR(272) + NCHAR(208)
    SET @UNSIGN_CHARS = N'aadeoouaaaaaaaaaaaaaaaeeeeeeeeeeiiiiiooooooooooooooouuuuuuuuuuyyyyyAADEOOUAAAAAAAAAAAAAAAEEEEEEEEEEIIIIIOOOOOOOOOOOOOOOUUUUUUUUUUYYYYYDD'
 
    DECLARE @COUNTER int
    DECLARE @COUNTER1 int
   
    SET @COUNTER = 1
    WHILE (@COUNTER <= LEN(@inputVar))
    BEGIN  
        SET @COUNTER1 = 1
        WHILE (@COUNTER1 <= LEN(@SIGN_CHARS) + 1)
        BEGIN
            IF UNICODE(SUBSTRING(@SIGN_CHARS, @COUNTER1,1)) = UNICODE(SUBSTRING(@inputVar,@COUNTER ,1))
            BEGIN          
                IF @COUNTER = 1
                    SET @inputVar = SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1) + SUBSTRING(@inputVar, @COUNTER+1,LEN(@inputVar)-1)      
                ELSE
                    SET @inputVar = SUBSTRING(@inputVar, 1, @COUNTER-1) +SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1) + SUBSTRING(@inputVar, @COUNTER+1,LEN(@inputVar)- @COUNTER)
                BREAK
            END
            SET @COUNTER1 = @COUNTER1 +1
        END
        SET @COUNTER = @COUNTER +1
    END
    -- SET @inputVar = replace(@inputVar,' ','-')
    RETURN @inputVar
END
GO
-------------------------
--- Created
CREATE PROC USP_InsertCar_ImageCar_Contract_ToCustomer
@idCustomer INT, @typeCar NVARCHAR, @idStaff INT, @typeParking NVARCHAR(30), @valueParking INT , @imageFrontIn IMAGE, @imageBackIn IMAGE
AS
BEGIN	
		INSERT INTO Car(type) VALUES (@typeCar)
		DECLARE @idCar INT
		SELECT @idCar = MAX(id) FROM car
		INSERT INTO ImageCar(idCar, frontCheckIn, backCheckIn, status) VALUES (@idCar, @imageFrontIn, @imageBackIn, 0)
		INSERT INTO Contract(timeIn, price, idCustomer, idStaff, idCar, typeParking, valueParking) VALUES (GETDATE(), 0, @idCustomer, @idStaff, @idCar, @typeParking, @valueParking)
END
GO
----------------------------------------------------
----------Created
CREATE PROC USP_CheckInParking
@qrCode NVARCHAR(30), @idStaff INT, @typeCar NVARCHAR(30), @price FLOAT, @typeParking NVARCHAR(30), @valueParking INT ,@imageFrontIn IMAGE, @imageBackIn IMAGE
AS
BEGIN
	DECLARE @idCustomer INT
	DECLARE @isUnregisteredCustomers INT = 0
	DECLARE @countID INT = 0 -- Nếu 1 id và TypeCustomer != 0 thì là thành viên đăng kí - ngược lại là chưa
	SELECT @countID = COUNT(*) FROM Customer WHERE qrCode = @qrCode AND typeCustomer <> 0
	IF (@countID = 1) -- là thành viên đã đăng ký
	BEGIN
		SELECT @idCustomer = id FROM Customer WHERE qrCode = @qrCode
		EXEC USP_InsertCar_ImageCar_Contract_ToCustomer @idCustomer, @typeCar , @idStaff , @typeParking, @valueParking, @imageFrontIn , @imageBackIn
	END
	ELSE
	BEGIN 
		INSERT INTO Customer(TypeCustomer, totalMoney, qrCode) VALUES (0, @price, @qrCode)
		SELECT @idCustomer = MAX(id) FROM Customer
		EXEC USP_InsertCar_ImageCar_Contract_ToCustomer @idCustomer , @typeCar , @idStaff , @typeParking, @valueParking, @imageFrontIn , @imageBackIn
	END	
END
GO
------------------------------
-----Create
CREATE PROC USP_CheckOutParking
@qrCode NVARCHAR(30), @idStaff INT, @price FLOAT, @imageFrontOut IMAGE, @imageBackOut IMAGE
AS
BEGIN
	DECLARE @idContract INT
	SELECT @idContract = Con.id FROM Customer as Cus , Contract as Con WHERE Cus.id = Con.idCustomer AND timeOut IS NULL AND qrCode = @qrCode
	UPDATE Contract SET timeOut = GETDATE() , price = @price , idStaff = @idStaff WHERE id = @idContract
	DECLARE @idCustomer INT = 0
	SELECT @idCustomer = idCustomer FROM Contract WHERE id = @idContract
	UPDATE Customer SET totalMoney = totalMoney + @price;
	DECLARE @idImage INT
	SELECT @idImage = IC.id FROM Contract as Con, Car as C, ImageCar as IC WHERE @idContract = Con.id AND Con.idCar = C.id AND IC.idCar = C.id
	UPDATE ImageCar SET frontCheckOut = @imageFrontOut , backCheckOut = @imageBackOut, status = 1 WHERE id = @idImage -- Cập nhật status trong ImageCar
END
GO
-----------------------------------

---------------------------------------
 --------Created   ------------------- Check In by qr code
 CREATE PROC USP_CheckInByQRCode
 @qrCode NVARCHAR(30)
 AS
 BEGIN
	SELECT COUNT(*) FROM Customer as Cus , Contract as Con WHERE Cus.id = Con.idCustomer AND timeOut IS NULL AND qrCode = @qrCode -- 0 - checkin còn lại là checkout
 END
 GO
 ---------------------------------------------
 ------Create
 CREATE PROC USP_GetIDCarParking
 @qrCode NVARCHAR(30)
 AS
 BEGIN
	SELECT Con.idCar FROM Customer as Cus , Contract as Con WHERE Cus.id = Con.idCustomer AND timeOut IS NULL AND qrCode = @qrCode
 END
 GO
 -----------------------------------
 -----------------
 CREATE PROC USP_GetContractByQRCode
 @qrCode NVARCHAR(30)
 AS
 BEGIN
	SELECT con.id, con.timeIn, con.timeOut, con.price, con.idCustomer, con.idStaff, con.idCar, con.typeParking, con.valueParking FROM Customer as Cus , Contract as Con WHERE Cus.id = Con.idCustomer AND timeOut IS NULL AND qrCode = @qrCode -- 0 - checkin còn lại là checkout
 END
 GO
 ------------------------------
 ----------------------------------
 CREATE PROC USP_UpdatePriceContractAndMoneyCustomer
 @idContract INT, @price FLOAT
 AS
 BEGIN
	UPDATE Contract SET price = @price WHERE id = @idContract
	DECLARE @idCustomer INT = 0
	SELECT @idCustomer = idCustomer FROM Contract WHERE id = @idContract
	UPDATE Customer SET totalMoney = totalMoney + @price WHERE id = @idCustomer
 END
 GO
 ------------------------------------
 ----------------
CREATE PROC USP_LoginAccountManager
@userName INT, @passWord NVARCHAR(30)
AS
BEGIN
	SELECT * FROM Staff as st, Speciality as Sp WHERE st.idSpeciality = Sp.id AND st.id = @userName AND pass = @passWord AND content = N'Manager'
END
GO
 ------------------------
 ---------------------------
 CREATE PROC USP_LoginAccountStaff
 @userName INT, @passWord NVARCHAR(30)
AS
BEGIN
	SELECT * FROM Staff as st, Speciality as Sp WHERE st.idSpeciality = Sp.id AND st.id = @userName AND pass = @passWord AND content <> N'Manager'
END
GO
 -----------------------------
 -----------------------------
 CREATE PROC USP_InsertCustomer
 @fname NVARCHAR(30), @lname NVARCHAR(30), @identityNumber NVARCHAR(30), @gender NVARCHAR(30), @bdate DATE, @address NVARCHAR(100), @phone NVARCHAR(30), @photo Image, @typeCustomer INT, @qrCode NVARCHAR(30)
 AS
 BEGIN
	INSERT INTO Photo(image) VALUES (@photo)
	DECLARE @maxIDPhoto INT = 0
	SELECT @maxIDPhoto = MAX(id) FROM Photo;
	INSERT INTO Customer(fname, lname, identityNumber, gender, bdate, address, phone, idPhoto, typeCustomer, totalMoney, qrCode) VALUES(@fname, @lname, @identityNumber, @gender, @bdate, @address, @phone, @maxIDPhoto, @typeCustomer, 0, @qrCode)
 END
 GO
 ----------------------------------
 ---------------------------------
CREATE PROC USP_IsExistByQRCodeOfCustomer -- Kiểm tra xem mã qrcode có tồn tại chưa
@qrCode NVARCHAR(30)
AS
BEGIN
	SELECT * FROM dbo.Customer WHERE qrCode = @qrCode
END
GO
 ----------------------------------
 ---------------------------------
 CREATE PROC USP_UpdateCustomer
 @id INT, @fname NVARCHAR(30), @lname NVARCHAR(30), @identityNumber NVARCHAR(30), @gender NVARCHAR(30), @bdate DATE, @address NVARCHAR(100), @phone NVARCHAR(30), @photo Image, @typeCustomer INT, @qrCode NVARCHAR(30)
 AS
 BEGIN
	UPDATE Customer SET fname = @fname, lname = @lname, identityNumber = @identityNumber, gender = @gender, bdate = @bdate, address = @address, phone = @phone, typeCustomer = @typeCustomer, qrCode = @qrCode WHERE id = @id
	DECLARE @idPhoto INT = 0
	SELECT @idPhoto = idPhoto FROM Customer WHERE id = @id
	UPDATE Photo SET image = @photo WHERE id = @idPhoto
 END
 GO
 -----------------------------------------
 ------------------------------------
 CREATE PROC USP_DeleteCustomer
 @id INT
 AS
 BEGIN
	DECLARE @idPhoto INT = 0
	SELECT @idPhoto = idPhoto FROM Customer WHERE id = @id	
	DELETE FROM Receipt WHERE idContract IN (SELECT id FROM Contract WHERE idCustomer = @id)
	DELETE FROM ContractDetail WHERE idContract IN (SELECT id FROM Contract WHERE idCustomer = @id)
	DELETE FROM Contract WHERE idCustomer = @id
	DELETE FROM Photo WHERE id = @idPhoto
	DELETE FROM Customer WHERE id = @id

 END
 GO
 ----------------------------------
 ---------------------------------
 CREATE PROC USP_InsertStaff
 @fname NVARCHAR(30), @lname NVARCHAR(30), @identityNumber NVARCHAR(30), @gender NVARCHAR(30), @bdate DATE, @address NVARCHAR(100), @phone NVARCHAR(30), @photo Image, @idSpeciality INT, @passWord NVARCHAR(30), @salary FLOAT, @bonus FLOAT
 AS
 BEGIN
	INSERT INTO Photo(image) VALUES (@photo)
	DECLARE @maxIDPhoto INT = 0
	SELECT @maxIDPhoto = MAX(id) FROM Photo;
	INSERT INTO Staff(fname, lname, identityNumber, gender, bdate, address, phone, idPhoto, idSpeciality , salary, bonus , pass) VALUES(@fname, @lname, @identityNumber, @gender, @bdate, @address, @phone, @maxIDPhoto, @idSpeciality, @salary, @bonus, @passWord)
 END
 GO
 -----------------------------------
 -------------------------------
 CREATE PROC USP_UpdateStaff
 @id INT, @fname NVARCHAR(30), @lname NVARCHAR(30), @identityNumber NVARCHAR(30), @gender NVARCHAR(30), @bdate DATE, @address NVARCHAR(100), @phone NVARCHAR(30), @photo Image, @idSpeciality INT, @passWord NVARCHAR(30), @salary FLOAT, @bunos FLOAT
 AS
 BEGIN
	UPDATE Staff SET fname = @fname, lname = @lname, identityNumber = @identityNumber, gender = @gender, bdate = @bdate, address = @address, phone = @phone, idSpeciality = @idSpeciality, pass = @passWord, salary = @salary, bonus = @bunos WHERE id = @id
	DECLARE @idPhoto INT = 0
	SELECT @idPhoto = idPhoto FROM Staff WHERE id = @id
	UPDATE Photo SET image = @photo WHERE id = @idPhoto
 END
 GO
 ------------------------------------------
 --------------------------------------------
 CREATE PROC USP_DeleteStaff
 @id INT
 AS
 BEGIN
	DECLARE @idPhoto INT = 0
	SELECT @idPhoto = idPhoto FROM Staff WHERE id = @id	
	DELETE FROM Receipt WHERE idContract IN (SELECT id FROM Contract WHERE idStaff = @id)
	DELETE FROM ContractDetail WHERE idContract IN (SELECT id FROM Contract WHERE idStaff = @id)
	DELETE FROM Contract WHERE idStaff = @id
	DELETE FROM Photo WHERE id = @idPhoto
	DELETE FROM Staff WHERE id = @id

 END
 GO
 --------------------------------------------------
 ------------------------------------------------
 CREATE PROC USP_GetListStaff
 AS
 BEGIN
	SELECT st.id as [ID Staff], fname as [First Name], lname as [Last Name], identityNumber as [ID Number], gender as [Gender], bdate as [Birth Date], 
	address as [Address], phone as [Phone], image as [Image], salary as [Salary], bonus as [Bouns], sp.content as [Specialiy]
	FROM Staff AS st, Photo as pt, Speciality as sp
	WHERE st.idPhoto = pt.id AND st.idSpeciality = sp.id
 END
 GO
 -----------------------------------------------
 --------------------------------------
 CREATE PROC USP_SearchListStaff
 @keyWord NVARCHAR (30)
 AS
 BEGIN
	SELECT st.id as [ID Staff], fname as [First Name], lname as [Last Name], identityNumber as [ID Number], gender as [Gender], bdate as [Birth Date], 
	address as [Address], phone as [Phone], image as [Image], salary as [Salary], bonus as [Bouns], sp.content as [Specialiy]
	FROM Staff AS st, Photo as pt, Speciality as sp
	WHERE st.idPhoto = pt.id AND st.idSpeciality = sp.id AND CONCAT(st.id, fname, identityNumber, phone, gender, address, sp.content) LIKE N'%' + @keyWord + '%'
 END
 GO
 -----------------------------------------------
 --------------------------------------
 CREATE PROC USP_GetListCustomer
 AS
 BEGIN
	SELECT ct.id as [ID Customer], fname as [First Name], lname as [Last Name], identityNumber as [ID Number], gender as [Gender], bdate as [Birth Date], 
	address as [Address], phone as [Phone], image as [Image], tc.name as [Type], qrCode as [QR CODE]
	FROM Customer AS ct, Photo as pt, TypeCustomer as tc
	WHERE ct.idPhoto = pt.id AND ct.typeCustomer = tc.id AND typeCustomer <> 0
 END
 GO
 -----------------------------------------------
 --------------------------------------
 CREATE PROC USP_SearchListCustomer
 @keyWord NVARCHAR(30)
 AS
 BEGIN
	SELECT ct.id as [ID Customer], fname as [First Name], lname as [Last Name], identityNumber as [ID Number], gender as [Gender], bdate as [Birth Date], 
	address as [Address], phone as [Phone], image as [Image], tc.name as [Type], qrCode as [QR CODE]
	FROM Customer AS ct, Photo as pt, TypeCustomer as tc
	WHERE ct.idPhoto = pt.id AND ct.typeCustomer = tc.id AND typeCustomer <> 0 AND CONCAT(ct.id, fname, identityNumber, phone, gender, tc.name) LIKE N'%' + @keyWord + '%'
 END
 GO
 -----------------------------------------------
 --------------------------------------
 CREATE PROC USP_GetListContract
 AS
 BEGIN
	SELECT cus.id as [ID Customer], cus.fname as [First Name Customer], cus.lname as [Last Name Customer], tpc.name as[Type Customer], car.type as [Type Car],car.id as [ID Car],
	timeIn as [Time In], timeOut as[Time Out], valueParking as [Value Parking], typeParking as [Type Parking], price as [Price], sta.id as [ID Staff]
	FROM Contract as con, Customer as cus, Staff as sta, Car as car, TypeCustomer tpc
	WHERE con.idCustomer = cus.id AND con.idStaff = sta.id AND con.idCar = car.id AND cus.typeCustomer = tpc.id
 END 
 GO
 ------------------------------
 ---------------------------------------------
 CREATE PROC USP_SearchListContract
 @keyWord NVARCHAR(30)
 AS
 BEGIN
	SELECT cus.id as [ID Customer], cus.fname as [First Name Customer], cus.lname as [Last Name Customer], tpc.name as[Type Customer], car.type as [Type Car],car.id as [ID Car],
	timeIn as [Time In], timeOut as[Time Out], valueParking as [Value Parking], typeParking as [Type Parking], price as [Price], sta.id as [ID Staff]
	FROM Contract as con, Customer as cus, Staff as sta, Car as car, TypeCustomer tpc
	WHERE con.idCustomer = cus.id AND con.idStaff = sta.id AND con.idCar = car.id AND cus.typeCustomer = tpc.id AND CONCAT(cus.id, car.id, sta.id, cus.fname) LIKE N'%' + @keyWord + '%'
 END
 GO
 -----------------------------------------------
 --------------------------------------
 CREATE PROC USP_SearchListContractByTimeIn
 @timeInStart DATETIME, @timeInEnd DATETIME
 AS
 BEGIN
	SELECT cus.id as [ID Customer], cus.fname as [First Name Customer], cus.lname as [Last Name Customer], tpc.name as[Type Customer], car.type as [Type Car],car.id as [ID Car],
	timeIn as [Time In], timeOut as[Time Out], valueParking as [Value Parking], typeParking as [Type Parking], price as [Price], sta.id as [ID Staff]
	FROM Contract as con, Customer as cus, Staff as sta, Car as car, TypeCustomer tpc
	WHERE con.idCustomer = cus.id AND con.idStaff = sta.id AND con.idCar = car.id AND cus.typeCustomer = tpc.id AND timeIn BETWEEN @timeInStart AND @timeInEnd
 END 
 GO
 ------------------------------
 ---------------------------------------------
 CREATE PROC USP_SearchListContractByTimeOut
 @timeOutStart DATETIME, @timeOutEnd DATETIME
 AS
 BEGIN
	SELECT cus.id as [ID Customer], cus.fname as [First Name Customer], cus.lname as [Last Name Customer], tpc.name as[Type Customer], car.type as [Type Car],car.id as [ID Car],
	timeIn as [Time In], timeOut as[Time Out], valueParking as [Value Parking], typeParking as [Type Parking], price as [Price], sta.id as [ID Staff]
	FROM Contract as con, Customer as cus, Staff as sta, Car as car, TypeCustomer tpc
	WHERE con.idCustomer = cus.id AND con.idStaff = sta.id AND con.idCar = car.id AND cus.typeCustomer = tpc.id AND timeOut BETWEEN @timeOutStart AND @timeOutEnd
 END 
 GO
 ------------------------------
 ---------------------------------------------
 CREATE PROC USP_TotalRevenueByDay
 @dateIn DATE, @dateOut DATE
 AS
 BEGIN
	SELECT Convert(DATE, timeOut) as [Date], SUM(price) as [Total Revenue] FROM Contract WHERE timeOut BETWEEN Convert(NVARCHAR, @dateIn) + ' 00:00:00' AND Convert(NVARCHAR, @dateOut) + ' 23:59:59'
	GROUP BY Convert(DATE, timeOut)
 END
 GO
 ------------------------------------------- RENT CAR
 -------------------------------------------------
 CREATE PROC USP_InsertCarRentOfCustomer
 @idOwner INT, @licensePlates NVARCHAR(30), @type NVARCHAR(30), @color NVARCHAR(30), @frontCar IMAGE, @backCar IMAGE
 AS
 BEGIN
 	INSERT INTO dbo.Car (licensePlates, type, color ) VALUES (@licensePlates, @type, @color)
	DECLARE @idCar INT
	SELECT @idCar = MAX(id) FROM dbo.Car
	INSERT INTO dbo.ImageCarRent ( idCar, frontCheckIn, backCheckIn ) VALUES  ( @idCar, @frontCar, @backCar)
	INSERT INTO dbo.StatusCar(idCar, idOwner, idRenter, isOwner) VALUES (@idCar, @idOwner, 0, 0)
	      
 END
 GO
 -------------------------------------------
 -------------------------------------------------
 CREATE PROC USP_InsertCarRentOfCompany
 @licensePlates NVARCHAR(30), @type NVARCHAR(30), @color NVARCHAR(30), @frontCar IMAGE, @backCar IMAGE
 AS
 BEGIN
 	INSERT INTO dbo.Car (licensePlates, type, color ) VALUES (@licensePlates, @type, @color)
	DECLARE @idCar INT
	SELECT @idCar = MAX(id) FROM dbo.Car
	INSERT INTO dbo.ImageCarRent ( idCar, frontCheckIn, backCheckIn ) VALUES  ( @idCar, @frontCar, @backCar)
	INSERT INTO dbo.StatusCar ( idCar, idOwner, idRenter, isOwner )VALUES  ( @idCar, 0, 0, 1) -- of company and at company and expired (đã về với chủ)
 END
 GO
 ------------------------------------------------- 
------------------------------------------------------
CREATE PROC USP_IsExistCarRentByLicensePlates -- Kiểm tra xem bảng số xe hiện có đang được quản lý bởi workshop
@licensePlates NVARCHAR(30)
AS
BEGIN
	DECLARE @idCar INT
	SELECT @idCar = id FROM dbo.Car WHERE licensePlates = @licensePlates
	SELECT * FROM dbo.StatusCar
	WHERE idCar = @idCar AND (idOwner = 0 OR (idOwner <> 0 AND isOwner = 0))
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_GetAllDataCarRentAtCompany -- Danh sách xe trong bãi xe
AS
BEGIN
	SELECT car.id AS [ID], car.licensePlates AS [License Plates], car.type AS [Type], car.color AS [Color], img.frontCheckIn AS [Front Image], img.backCheckIn AS [Back Image] 
	FROM dbo.Car AS car, dbo.ImageCarRent AS img, dbo.StatusCar AS stt
	WHERE car.id = img.idCar AND car.id = stt.idCar AND stt.idRenter = 0 -- at company
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_GetAllDataCarRentCustomerCanRent -- Danh sách xe mà khách hàng có thể thuê - các xe trừ xe khách hàng cho thuê.
@idCustomer INT
AS
BEGIN
	SELECT car.id AS [ID], car.licensePlates AS [License Plates], car.type AS [Type], car.color AS [Color], img.frontCheckIn AS [Front Image], img.backCheckIn AS [Back Image] 
	FROM dbo.Car AS car, dbo.ImageCarRent AS img, dbo.StatusCar AS stt
	WHERE car.id = img.idCar AND car.id = stt.idCar AND stt.idOwner <> @idCustomer AND stt.idRenter = 0 -- at company
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_SearchCarRentAtCompanyByTypeCar
@typeCar NVARCHAR(30)
AS
BEGIN
	SELECT car.id AS [ID], car.licensePlates AS [License Plates], car.type AS [Type], car.color AS [Color], img.frontCheckIn AS [Front Image], img.backCheckIn AS [Back Image] 
	FROM dbo.Car AS car, dbo.ImageCarRent AS img , dbo.StatusCar AS stt
	WHERE car.id = img.idCar AND car.type = @typeCar AND car.id = stt.idCar AND stt.idRenter = 0 -- at company
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_SearchCarRentAtCompanyByColor
@color NVARCHAR(30)
AS
BEGIN
	SELECT car.id AS [ID], car.licensePlates AS [License Plates], car.type AS [Type], car.color AS [Color], img.frontCheckIn AS [Front Image], img.backCheckIn AS [Back Image] 
	FROM dbo.Car AS car, dbo.ImageCarRent AS img, dbo.StatusCar AS stt
	WHERE car.id = img.idCar AND car.color = @color AND car.id = stt.idCar AND stt.idRenter = 0 -- at company
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_SearchCarRentAtCompanyByTypeCarAndColor
@typeCar NVARCHAR(30), @color NVARCHAR(30)
AS
BEGIN
	SELECT car.id AS [ID], car.licensePlates AS [License Plates], car.type AS [Type], car.color AS [Color], img.frontCheckIn AS [Front Image], img.backCheckIn AS [Back Image] 
	FROM dbo.Car AS car, dbo.ImageCarRent AS img, dbo.StatusCar AS stt
	WHERE car.id = img.idCar AND car.type = @typeCar AND car.id = stt.idCar AND car.color = @color AND stt.idRenter = 0 -- at company
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_DeleteCarRentByIDCar
@idCar INT
AS
BEGIN
	DELETE FROM dbo.ImageCarRent WHERE idCar = @idCar
	DELETE FROM dbo.StatusCar WHERE idCar = @idCar
	DELETE FROM dbo.Car WHERE id = @idCar
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_CustomerRentCarByIDCar
@idRenter INT, @idCar INT
AS
BEGIN
	UPDATE dbo.StatusCar SET idRenter = @idRenter , isOwner = 0 WHERE idCar = @idCar -- cập nhật người xe lại có id người thuê xe = biến truyền vào
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_CheckCustomerWithCarRental
@idCustomer INT
AS
BEGIN
	SELECT * 
	FROM dbo.StatusCar 
	WHERE ((idOwner = @idCustomer AND idRenter <> @idCustomer AND isOwner = 0 ) OR (idOwner <> @idCustomer AND idRenter = @idCustomer AND isOwner = 0))
	-- khách hàng cho thuê xe (xe chưa được trả lại)        -- Khách hàng thuê xe (Xe không phải của khách hàng đến thuê và xe này đang được khách hàng này thuê)
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_GetCarRentByIDCustomer -- Lấy danh sách xe mà khách hàng này thuê hoặc mượn
@idCustomer INT
AS
BEGIN
	SELECT car.id, car.licensePlates AS [licensePlates], car.type, car.color, img.frontCheckIn, img.backCheckIn, stt.idOwner, stt.idRenter, stt.isOwner
	FROM dbo.StatusCar AS stt, dbo.Car AS car, dbo.ImageCarRent AS img
	WHERE car.id = img.idCar AND car.id = stt.idCar
	AND ((stt.idOwner = @idCustomer AND stt.idRenter <> @idCustomer AND stt.isOwner = 0) OR (stt.idOwner <> @idCustomer AND stt.idRenter = @idCustomer AND stt.isOwner = 0))
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_GetStatusCarByIDCustomerAndIDCar
@idCustomer INT, @idCar INT
AS
BEGIN
	SELECT cus.id, car.licensePlates, ctr.timeIn, ctr.timeOut, stt.idRenter
	FROM dbo.ContractRent AS ctr, dbo.StatusCar AS stt, dbo.Car AS car, dbo.Customer AS cus
	WHERE ctr.idCar = car.id AND car.id = stt.idCar AND ctr.idCustomer = cus.id
	AND cus.id = @idCustomer AND car.id = @idCar
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_CustomerGetCar
@idCustomer INT, @idCar INT
AS
BEGIN
	UPDATE dbo.StatusCar SET idRenter = @idCustomer, isOwner = 1 WHERE idCar = @idCar AND idOwner = @idCustomer
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_CustomerReturnCar
@idCustomer INT, @idCar INT
AS
BEGIN
	UPDATE dbo.StatusCar SET idRenter = 0, isOwner = 0 WHERE idCar = @idCar AND idRenter = @idCustomer AND idOwner <> 0
	UPDATE dbo.StatusCar SET idRenter = 0, isOwner = 1 WHERE idCar = @idCar AND idRenter = @idCustomer AND idOwner = 0
END
GO
-------------------------------------------------
------------------------------------------------------sửa chữa
CREATE PROC USP_ListOfVehiclesUnderManagement
AS
BEGIN
	SELECT id INTO tableIDCarRent FROM dbo.StatusCar
	WHERE idOwner = 0 OR (idOwner <> 0 AND isOwner = 0)

	SELECT car.id, stt.idOwner, dbo.Customer.fname AS fnameO, dbo.Customer.lname AS lnameO,  stt.idRenter, cus.fname AS fnameR, cus.lname AS lnameR, 
	car.licensePlates, car.type, car.color
	INTO tableListCarRent
	FROM dbo.StatusCar AS stt, dbo.Customer, dbo.Customer AS cus, dbo.Car AS car
	WHERE (stt.idOwner = dbo.Customer.id OR stt.idOwner = 0) AND (stt.idRenter = cus.id OR stt.idRenter = 0)
	AND stt.idCar = car.id AND (stt.idOwner <> stt.idRenter OR stt.idOwner = 0)
	AND stt.id IN (SELECT id FROM tableIDCarRent)
	
	UPDATE dbo.tableListCarRent SET fnameO = N'WORK', lnameO = N'SHOP' WHERE idOwner = 0
	UPDATE dbo.tableListCarRent SET fnameR = N'WORK', lnameR = N'SHOP' WHERE idRenter = 0
	
	SELECT DISTINCT id, idOwner, fnameO, lnameO, idRenter, fnameR, lnameR, licensePlates, type, color
	INTO InfoBasicCarRent
	FROM tableListCarRent

	SELECT inf.id AS [ID Car], idOwner AS [ID Owner], fnameO AS [Fname Owner], lnameO AS [Lname Owner],
	idRenter AS [ID Renter], fnameR AS [Fname Renter], lnameR AS [Lname Renter],
	licensePlates AS [License Plates], type AS [Type], color AS [Color], img.frontCheckIn AS [Front Image], img.backCheckIn AS [Back Image]
	FROM InfoBasicCarRent AS inf, dbo.ImageCarRent AS img
	WHERE inf.ID = img.idCar

	DROP TABLE dbo.tableIDCarRent 
	DROP TABLE dbo.tableListCarRent
	DROP TABLE InfoBasicCarRent
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_ListOfCarCompanies
AS
BEGIN
	WITH tableTemp AS (SELECT car.id, stt.idRenter, cus.fname, cus.lname, car.licensePlates, car.type, car.color
	FROM dbo.Car AS car, dbo.StatusCar AS stt, dbo.Customer AS cus, dbo.ImageCarRent AS img
	WHERE stt.idCar = car.id AND stt.idRenter = cus.id AND img.idCar = car.id AND stt.idOwner = 0
	UNION
	SELECT car.id, stt.idRenter ,fname = 'WORK', fname = 'SHOP', car.licensePlates, car.type, car.color
	FROM dbo.Car AS car, dbo.StatusCar AS stt, dbo.ImageCarRent AS img
	WHERE stt.idCar = car.id AND car.id = img.idCar AND stt.idOwner = 0 AND stt.idRenter = 0)
	SELECT tbl.id AS [ID Car], tbl.idRenter AS  [ID Renter], tbl.fname AS [First Name], tbl.lname AS [Last Name],
	tbl.licensePlates AS [License Plates], tbl.type AS [Type], tbl.color AS [Color],
	img.frontCheckIn AS [Front Image], img.backCheckIn AS [Back Image]
	FROM tableTemp AS tbl, dbo.ImageCarRent AS img
	WHERE tbl.id = img.idCar
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_VehicleListingsCanRented
AS
BEGIN
	WITH tableTemp AS (SELECT car.id, stt.idOwner, cus.fname, cus.lname, car.licensePlates, car.type, car.color
	FROM dbo.Car AS car, dbo.StatusCar AS stt, dbo.Customer AS cus, dbo.ImageCarRent AS img
	WHERE stt.idCar = car.id AND stt.idOwner = cus.id AND img.idCar = car.id AND stt.idRenter = 0
	UNION
	SELECT car.id, stt.idOwner ,fname = 'WORK', fname = 'SHOP', car.licensePlates, car.type, car.color
	FROM dbo.Car AS car, dbo.StatusCar AS stt, dbo.ImageCarRent AS img
	WHERE stt.idCar = car.id AND car.id = img.idCar AND stt.idRenter = 0 AND stt.idOwner = 0)
	SELECT tbl.id AS [ID Car], tbl.idOwner AS  [ID Owner], tbl.fname AS [First Name], tbl.lname AS [Last Name],
	tbl.licensePlates AS [License Plates], tbl.type AS [Type], tbl.color AS [Color],
	img.frontCheckIn AS [Front Image], img.backCheckIn AS [Back Image]
	FROM tableTemp AS tbl, dbo.ImageCarRent AS img
	WHERE tbl.id = img.idCar
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_ListOfVehiclesBeingRented
AS
BEGIN
	SELECT car.id AS [ID Car], stt.idOwner AS [ID Owner], cus.fname AS [First Name], cus.lname AS [Last Name],
	car.licensePlates AS [License Plates], car.type AS [Type], car.color AS [Color],
	img.frontCheckIn AS [Front Image], img.backCheckIn AS [Back Image]
	FROM dbo.Car AS car, dbo.StatusCar AS stt, dbo.Customer AS cus, dbo.ImageCarRent AS img
	WHERE stt.idCar = car.id AND stt.idOwner = cus.id AND img.idCar = car.id AND stt.idOwner <> 0
	
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_ListOfRentedCars
AS
BEGIN
	SELECT car.id AS [ID Car], stt.idRenter AS [ID Owner], cus.fname AS [First Name], cus.lname AS [Last Name],
	car.licensePlates AS [License Plates], car.type AS [Type], car.color AS [Color],
	img.frontCheckIn AS [Front Image], img.backCheckIn AS [Back Image]
	FROM dbo.Car AS car, dbo.StatusCar AS stt, dbo.Customer AS cus, dbo.ImageCarRent AS img
	WHERE stt.idCar = car.id AND stt.idRenter = cus.id AND img.idCar = car.id AND stt.idRenter <> 0 AND stt.isOwner = 0
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_SearchDeleteCarOfCompanyByIDCar
@idCar INT
AS
BEGIN
	SELECT car.licensePlates, car.type, car.color, img.frontCheckIn, img.backCheckIn
	FROM dbo.StatusCar AS stt, dbo.Car AS car, dbo.ImageCarRent AS img
	WHERE stt.idCar = car.id AND car.id = img.idCar AND stt.idOwner = 0 AND stt.idRenter = 0 AND car.id = @idCar
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_DeleteCarOfCompanyByIDCar
@idCar INT
AS
BEGIN
	DELETE dbo.StatusCar WHERE idCar = @idCar
	DELETE dbo.ContractRent WHERE idCar = @idCar
	DELETE dbo.ImageCarRent WHERE idCar = @idCar
	DELETE dbo.car WHERE id = @idCar

END
GO
-------------------------------------------------
------------------------------------------------------




-------------------------------------------------------------------------
------------created
CREATE PROC USP_UnCheckedGetCarByQrCode
@qrCode NVARCHAR(30)
AS
BEGIN
	SELECT car.id, car.licensePlates, car.color, car.type FROM dbo.Car , dbo.Contract, dbo.Customer 
	WHERE dbo.Contract.idCustomer = dbo.Customer.id 
	AND dbo.Contract.idCar = car.id 
	AND dbo.Customer.qrCode = @qrCode
	AND dbo.Contract.timeOut IS NULL
END
GO
-------------------------------------------------
------------------------------------------------------
CREATE PROC USP_CheckedGetCarByIdCar
@idCar INT
AS 
BEGIN
	SELECT car.id, car.licensePlates, car.color, car.type FROM dbo.Car , dbo.Contract, dbo.Customer 
	WHERE dbo.Contract.idCustomer = dbo.Customer.id 
	AND dbo.Contract.idCar = car.id 
	AND car.id = @idCar
	AND dbo.Contract.timeOut IS NOT NULL 
END
GO

---------------------------------------------------------------
--created
CREATE PROC USP_GetListCarUnChecked
AS 
BEGIN
	SELECT car.id, car.licensePlates, car.color, car.type FROM dbo.Car , dbo.Contract, dbo.Customer 
	WHERE dbo.Contract.idCustomer = dbo.Customer.id 
	AND dbo.Contract.idCar = car.id 
	AND dbo.Contract.timeOut IS NULL
END
GO

